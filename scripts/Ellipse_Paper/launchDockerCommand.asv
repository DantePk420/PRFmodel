function launchDockerCommand(varargin)
%LAUNCHDOCKERCOMMAND Launches Dockers based on config files we already have


% docker = 'prfsynth';
% docker = 'prfanalyze-vista';
% solver = [];
% solver = 'vista6'
% sub    = 'ellipse';
% ses    = 'sizesv2';

% launchDockerCommand(docker,sub,ses,solver)

docker = varargin{1};
sub = varargin{2};
ses = varargin{3};
if length(varargin) < 4
    solver = [];
end

% Be sure the config file is there, otherwise download it all
cd(fullfile(pmRootPath,'local',sub))
if ~isfolder(fullfile(pmRootPath,'local',sub,'config_files'))
    configszip = websave(fullfile(pmRootPath,'local','config_files.zip'),'https://osf.io/zh5cs/download');
    unzip(configszip);
end


% Examples of actual calls in black server
% ./run_prfsynth.sh $ELLIPSE /data/localhome/glerma/toolboxes/PRFmodel/local/ellipse/prfsynth-config_sub-ellipse_sess-sizesv2TR1.json
% ./run_prfanalyze.sh vista $WF /data/localhome/glerma/toolboxes/PRFmodel/local/WORDSFOV/prfanalyze-vista4-config_sub-003_ses-1.json
% ./run_prfreport.sh $ELLIPSE /data/localhome/glerma/toolboxes/PRFmodel/local/ellipse/prfreport-configuration_sub-ellipse_ses-eccsv2TR1.json



basedir = fullfile(pmRootPath,'local',sub);
switch docker
    case {'prfsynth'}
        % This is the config file
        config_fname = fullfile(pmRootPath,'local',sub,'config_files',...
            [docker '-config_sub-' sub '_sess-' ses '.json']);
        % This is the command line
        cmd = [fullfile(pmRootPath,'gear',docker,['run_' docker '.sh']) ' ' basedir ' ' config_fname];
        resultFile = fullfile(pmRootPath,'local',sub,'BIDS','derivatives',docker,...
                      ['sub-' sub],['ses-' ses],...
                      ['sub-' sub '_ses-' ses '_task-prf_acq-normal_run-01_bold.json']);
        if isfile(resultFile)
            fprintf('\n\nResult file already exists, skipping. \n')
        else
            fprintf('\n\nSending the following command:\n')
            fprintf('---> %s\n', cmd)

            s = system(cmd);
            if s > 0
                error('The command failed')
            else
                fprintf('Running ...\n\n')
            end
        end
    case {'prfanalyze'}
        config_fname = fullfile(pmRootPath,'local',sub,'config_files',...
            [docker '-config_sub-' sub '_sess-' ses '_solver-' solver '.json']);
        d = split(docker,'-');
        cmd = [fullfile(pmRootPath,'gear',docker,'run_prfanalyze.sh') ' ' solver(1:end-1) ' ' basedir ' ' config_fname]
        resultFile = fullfile(pmRootPath,'local',sub,'BIDS','derivatives',docker,...
                      ['sub-' sub],['ses-' ses],['sub-' sub '_ses-' ses '_task-prf_acq-normal_run-01_bold.json']);
        if isfile(resultFile)
            fprintf('\n\nResult file already exists, skipping. \n')
        else
            fprintf('\n\nSending the following command:\n')
            fprintf('---> %s\n', cmd)

            s = system(cmd);
            if s > 0
                error('The command failed')
            else
                fprintf('Running ...\n\n')
            end
        end    
    case {'prfreport'}
        % This is the config file
        config_fname = fullfile(pmRootPath,'local',sub,'config_files',...
            [docker '-configuration_sub-' sub '_sess-' ses '.json']);
        % This is the command line
        cmd = [fullfile(pmRootPath,'gear',docker,['run_' docker '.sh']) ' ' basedir ' ' config_fname];
        resultFile = fullfile(pmRootPath,'local',sub,'BIDS','derivatives',docker,...
                      ['sub-' sub],['ses-' ses],...
                      ['sub-' sub '_ses-' ses '_task-prf_acq-normal_run-01_bold.json']);
        if isfile(resultFile)
            fprintf('\n\nResult file already exists, skipping. \n')
        else
            fprintf('\n\nSending the following command:\n')
            fprintf('---> %s\n', cmd)

            s = system(cmd);
            if s > 0
                error('The command failed')
            else
                fprintf('Running ...\n\n')
            end
        end        

    otherwise
        error('%s not recognized, valid options are prfsynth,prfreport,prfanalyze-vista,prfanalyze-afni');
end





%{
    % NOTE: same with experimental data. We downloaded the results that we use for
    %       analyses purposes. The data was originally downloaded  from the HCP 7T
    %       repository, modified, and then analyzed with the docker containers. 
    %       We provide the raw, intermediate and processed files in this link:
    %           hcp_7T_data_and_analysisWithConfig_00 (5Gb) https://osf.io/az5y6/download
    %           hcp_7T_data_and_analysisWithConfig_01 (4Gb) https://osf.io/udzs2/download
    %           To link them back together: 
    %              cat hcp_7T_data_and_analysisWithConfig_00 hcp_7T_data_and_analysisWithConfig_01 > hcp7T.zip

%}






end

